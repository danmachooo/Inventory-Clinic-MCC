{"ast":null,"code":"import _regeneratorRuntime from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\n\n// Reactive variables\n\nexport default {\n  __name: 'Reports',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var selectedYear = ref(new Date().getFullYear());\n    var availableYears = ref(Array.from({\n      length: 5\n    }, function (_, i) {\n      return new Date().getFullYear() - i;\n    }));\n    var reportData = ref([]);\n\n    // Fetch report data\n    var fetchReport = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"/reports\", {\n                params: {\n                  year: selectedYear.value\n                }\n              });\n            case 3:\n              response = _context.sent;\n              reportData.value = response.data.data;\n              _context.next = 11;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching report:\", _context.t0);\n              reportData.value = [];\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n      return function fetchReport() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // Download PDF report\n    var downloadPDF = function downloadPDF() {\n      var doc = new jsPDF();\n\n      // Title\n      doc.setFontSize(18);\n      doc.text(\"Inventory Report for \".concat(selectedYear.value), 14, 20);\n\n      // Table\n      doc.autoTable({\n        startY: 30,\n        head: [[\"Item Name\", \"Batch Name\", \"Total Added\", \"Total Removed\", \"Net Change\"]],\n        body: reportData.value.map(function (item) {\n          return [item.itemName, item.batchName, item.totalAdded, item.totalRemoved, item.netChange];\n        })\n      });\n\n      // Save PDF\n      doc.save(\"Inventory_Report_\".concat(selectedYear.value, \".pdf\"));\n    };\n\n    // Fetch report data when the component is mounted\n    onMounted(fetchReport);\n    var __returned__ = {\n      selectedYear: selectedYear,\n      availableYears: availableYears,\n      reportData: reportData,\n      fetchReport: fetchReport,\n      downloadPDF: downloadPDF,\n      ref: ref,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      get jsPDF() {\n        return jsPDF;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","jsPDF","selectedYear","Date","getFullYear","availableYears","Array","from","length","_","i","reportData","fetchReport","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","params","year","value","sent","data","t0","console","error","stop","apply","arguments","downloadPDF","doc","setFontSize","text","concat","autoTable","startY","head","body","map","item","itemName","batchName","totalAdded","totalRemoved","netChange","save"],"sources":["C:/Inventory-Clinic-MCC/frontend/src/views/Reports.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-6 py-8\">\r\n    <h1 class=\"text-gray-700 text-3xl font-medium mb-4\">Yearly Inventory Reports</h1>\r\n    <p class=\"text-gray-600\">View and download inventory reports for each year.</p>\r\n\r\n    <!-- Year Selection -->\r\n    <div class=\"mt-6 flex items-center space-x-4\">\r\n      <label for=\"year\" class=\"text-gray-700 font-medium\">Select Year:</label>\r\n      <select\r\n        id=\"year\"\r\n        v-model=\"selectedYear\"\r\n        @change=\"fetchReport\"\r\n        class=\"block w-32 px-3 py-2 border rounded-md text-gray-700\"\r\n      >\r\n        <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">\r\n          {{ year }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <!-- Report Table -->\r\n    <div v-if=\"reportData.length > -1\" class=\"mt-8\">\r\n      <h2 class=\"text-xl font-medium text-gray-700 mb-4\">\r\n        Inventory Report for {{ selectedYear }}\r\n      </h2>\r\n      <table class=\"table-auto w-full text-left border-collapse\">\r\n        <thead>\r\n          <tr class=\"bg-gray-100 text-gray-700\">\r\n            <th class=\"px-4 py-2 border\">Item Name</th>\r\n            <th class=\"px-4 py-2 border\">Batch Name</th>\r\n            <th class=\"px-4 py-2 border\">Total Added</th>\r\n            <th class=\"px-4 py-2 border\">Total Removed</th>\r\n            <th class=\"px-4 py-2 border\">Net Change</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr\r\n            v-for=\"(item, index) in reportData\"\r\n            :key=\"index\"\r\n            class=\"text-gray-600 hover:bg-gray-50\"\r\n          >\r\n            <td class=\"px-4 py-2 border\">{{ item.itemName }}</td>\r\n            <td class=\"px-4 py-2 border\">{{ item.batchName }}</td>\r\n            <td class=\"px-4 py-2 border\">{{ item.totalAdded }}</td>\r\n            <td class=\"px-4 py-2 border\">{{ item.totalRemoved }}</td>\r\n            <td class=\"px-4 py-2 border\">{{ item.netChange }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- Download Button -->\r\n      <button\r\n        @click=\"downloadPDF\"\r\n        class=\"mt-6 px-6 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-500\"\r\n      >\r\n        Download PDF\r\n      </button>\r\n    </div>\r\n\r\n    <!-- No Data Message -->\r\n    <div v-else class=\"mt-8\">\r\n      <p class=\"text-gray-600\">No data available for the selected year.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from \"vue\";\r\nimport axios from \"axios\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\n// Reactive variables\r\nconst selectedYear = ref(new Date().getFullYear());\r\nconst availableYears = ref(Array.from({ length: 5 }, (_, i) => new Date().getFullYear() - i));\r\nconst reportData = ref([]);\r\n\r\n// Fetch report data\r\nconst fetchReport = async () => {\r\n  try {\r\n    const response = await axios.get(\"/reports\", {\r\n      params: { year: selectedYear.value },\r\n    });\r\n    reportData.value = response.data.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching report:\", error);\r\n    reportData.value = [];\r\n  }\r\n};\r\n\r\n// Download PDF report\r\nconst downloadPDF = () => {\r\n  const doc = new jsPDF();\r\n\r\n  // Title\r\n  doc.setFontSize(18);\r\n  doc.text(`Inventory Report for ${selectedYear.value}`, 14, 20);\r\n\r\n  // Table\r\n  doc.autoTable({\r\n    startY: 30,\r\n    head: [[\"Item Name\", \"Batch Name\", \"Total Added\", \"Total Removed\", \"Net Change\"]],\r\n    body: reportData.value.map((item) => [\r\n      item.itemName,\r\n      item.batchName,\r\n      item.totalAdded,\r\n      item.totalRemoved,\r\n      item.netChange,\r\n    ]),\r\n  });\r\n\r\n  // Save PDF\r\n  doc.save(`Inventory_Report_${selectedYear.value}.pdf`);\r\n};\r\n\r\n// Fetch report data when the component is mounted\r\nonMounted(fetchReport);\r\n</script>\r\n\r\n"],"mappings":";;;;;;;;AAmEA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;;AAExB;;;;;;;IACA,IAAMC,YAAY,GAAGJ,GAAG,CAAC,IAAIK,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;IAClD,IAAMC,cAAc,GAAGP,GAAG,CAACQ,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAK,IAAIP,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGM,CAAC;IAAA,EAAC,CAAC;IAC7F,IAAMC,UAAU,GAAGb,GAAG,CAAC,EAAE,CAAC;;IAE1B;IACA,IAAMc,WAAW;MAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEOvB,KAAK,CAACwB,GAAG,CAAC,UAAU,EAAE;gBAC3CC,MAAM,EAAE;kBAAEC,IAAI,EAAExB,YAAY,CAACyB;gBAAM;cACrC,CAAC,CAAC;YAAA;cAFIT,QAAQ,GAAAG,QAAA,CAAAO,IAAA;cAGdjB,UAAU,CAACgB,KAAK,GAAGT,QAAQ,CAACW,IAAI,CAACA,IAAI;cAACR,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;cAEtCU,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAAX,QAAA,CAAAS,EAAO,CAAC;cAC9CnB,UAAU,CAACgB,KAAK,GAAG,EAAE;YAAC;YAAA;cAAA,OAAAN,QAAA,CAAAY,IAAA;UAAA;QAAA,GAAAhB,OAAA;MAAA,CAEzB;MAAA,gBAVKL,WAAWA,CAAA;QAAA,OAAAC,KAAA,CAAAqB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAUhB;;IAED;IACA,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MACxB,IAAMC,GAAG,GAAG,IAAIpC,KAAK,CAAC,CAAC;;MAEvB;MACAoC,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;MACnBD,GAAG,CAACE,IAAI,yBAAAC,MAAA,CAAyBtC,YAAY,CAACyB,KAAK,GAAI,EAAE,EAAE,EAAE,CAAC;;MAE9D;MACAU,GAAG,CAACI,SAAS,CAAC;QACZC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,YAAY,EAAE,aAAa,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;QACjFC,IAAI,EAAEjC,UAAU,CAACgB,KAAK,CAACkB,GAAG,CAAC,UAACC,IAAI;UAAA,OAAK,CACnCA,IAAI,CAACC,QAAQ,EACbD,IAAI,CAACE,SAAS,EACdF,IAAI,CAACG,UAAU,EACfH,IAAI,CAACI,YAAY,EACjBJ,IAAI,CAACK,SAAS,CACf;QAAA;MACH,CAAC,CAAC;;MAEF;MACAd,GAAG,CAACe,IAAI,qBAAAZ,MAAA,CAAqBtC,YAAY,CAACyB,KAAK,SAAM,CAAC;IACxD,CAAC;;IAED;IACA5B,SAAS,CAACa,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}