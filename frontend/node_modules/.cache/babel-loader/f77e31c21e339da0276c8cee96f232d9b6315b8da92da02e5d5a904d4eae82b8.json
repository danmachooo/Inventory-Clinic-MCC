{"ast":null,"code":"import _regeneratorRuntime from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport DashboardCard from '../components/DashboardCard.vue';\nvar API_URL = 'http://localhost:5000/api/inventory';\nexport default {\n  __name: 'Dashboard',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var totalItems = ref(0);\n    var lowStockCount = ref(0);\n    var expiringCount = ref(0);\n    var recentTransactions = ref([]);\n    var notifications = ref([]);\n    var fetchDashboardData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$Promise$all, _yield$Promise$all2, itemsResponse, lowStockResponse, expiringResponse, transactionsResponse, notificationsResponse;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Promise.all([axios.get(\"\".concat(API_URL, \"/items\")), axios.get(\"\".concat(API_URL, \"/low-stock\")), axios.get(\"\".concat(API_URL, \"/expiring-batches\")), axios.get(\"\".concat(API_URL, \"/transactions\")), axios.get(\"\".concat(API_URL, \"/notifications\"))]);\n            case 3:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5);\n              itemsResponse = _yield$Promise$all2[0];\n              lowStockResponse = _yield$Promise$all2[1];\n              expiringResponse = _yield$Promise$all2[2];\n              transactionsResponse = _yield$Promise$all2[3];\n              notificationsResponse = _yield$Promise$all2[4];\n              totalItems.value = itemsResponse.data.data.length;\n              lowStockCount.value = lowStockResponse.data.data.length;\n              expiringCount.value = expiringResponse.data.data.length;\n              recentTransactions.value = transactionsResponse.data.data.slice(0, 5); // Get only the 5 most recent transactions\n              notifications.value = notificationsResponse.data.data.slice(0, 5); // Get only the 5 most recent notifications\n              _context.next = 20;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching dashboard data:', _context.t0);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 17]]);\n      }));\n      return function fetchDashboardData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var formatDate = function formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    };\n    var getNotificationDescription = function getNotificationDescription(notification) {\n      var _notification$batch$i;\n      if (!notification.batch) return 'Details unavailable';\n      var itemName = ((_notification$batch$i = notification.batch.inventoryItem) === null || _notification$batch$i === void 0 ? void 0 : _notification$batch$i.name) || 'Unknown Item';\n      var batchNumber = notification.batch.batch_number || 'Unknown Batch';\n      switch (notification.notification_type) {\n        case 'LOW_STOCK':\n          return \"Batch \".concat(batchNumber, \" of \").concat(itemName, \" is running low. Current stock: \").concat(notification.quantity_left || 'Unknown');\n        case 'EXPIRED':\n          return \"Batch \".concat(batchNumber, \" of \").concat(itemName, \" has expired on \").concat(formatDate(notification.expiry_date));\n        default:\n          return 'Please check your inventory';\n      }\n    };\n    onMounted(fetchDashboardData);\n    var __returned__ = {\n      totalItems: totalItems,\n      lowStockCount: lowStockCount,\n      expiringCount: expiringCount,\n      recentTransactions: recentTransactions,\n      notifications: notifications,\n      API_URL: API_URL,\n      fetchDashboardData: fetchDashboardData,\n      formatDate: formatDate,\n      getNotificationDescription: getNotificationDescription,\n      ref: ref,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      DashboardCard: DashboardCard\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","DashboardCard","API_URL","totalItems","lowStockCount","expiringCount","recentTransactions","notifications","fetchDashboardData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$Promise$all","_yield$Promise$all2","itemsResponse","lowStockResponse","expiringResponse","transactionsResponse","notificationsResponse","wrap","_callee$","_context","prev","next","Promise","all","get","concat","sent","_slicedToArray","value","data","length","slice","t0","console","error","stop","apply","arguments","formatDate","dateString","Date","toLocaleDateString","year","month","day","getNotificationDescription","notification","_notification$batch$i","batch","itemName","inventoryItem","name","batchNumber","batch_number","notification_type","quantity_left","expiry_date"],"sources":["C:/Inventory-Clinic-MCC/frontend/src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-6 py-8\">\r\n    <h1 class=\"text-gray-700 text-3xl font-medium\">Dashboard</h1>\r\n    \r\n    <div class=\"mt-4\">\r\n      <div class=\"flex flex-wrap -mx-6\">\r\n        <DashboardCard title=\"Total Items\" :value=\"totalItems\" icon=\"Package\" color=\"bg-indigo-600\" />\r\n        <DashboardCard title=\"Low Stock Alerts\" :value=\"lowStockCount\" icon=\"AlertTriangle\" color=\"bg-orange-600\" />\r\n        <DashboardCard title=\"Expiring Soon\" :value=\"expiringCount\" icon=\"Clock\" color=\"bg-pink-600\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"mt-8 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n      <!-- Recent Transactions -->\r\n      <div class=\"bg-white shadow rounded-lg p-4\">\r\n        <h2 class=\"text-gray-600 text-xl font-medium mb-4\">Recent Transactions</h2>\r\n        <div class=\"overflow-x-auto\">\r\n          <table class=\"min-w-full leading-normal\">\r\n            <thead>\r\n              <tr>\r\n                <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                  Item\r\n                </th>\r\n                <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                  Action\r\n                </th>\r\n                <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                  Quantity\r\n                </th>\r\n                <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\r\n                  Date\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"transaction in recentTransactions\" :key=\"transaction.id\">\r\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                  <p class=\"text-gray-900 whitespace-no-wrap\">\r\n                    {{ transaction.InventoryItem.name }}\r\n                  </p>\r\n                </td>\r\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                  <p class=\"text-gray-900 whitespace-no-wrap\">{{ transaction.transaction_type }}</p>\r\n                </td>\r\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                  <p class=\"text-gray-900 whitespace-no-wrap\">{{ transaction.quantity_change }}</p>\r\n                </td>\r\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\r\n                  <p class=\"text-gray-900 whitespace-no-wrap\">{{ formatDate(transaction.date) }}</p>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Notifications -->\r\n      <div class=\"bg-white shadow rounded-lg p-4\">\r\n        <h2 class=\"text-gray-600 text-xl font-medium mb-4\">Notifications</h2>\r\n        <div class=\"space-y-4\">\r\n          <div v-for=\"notification in notifications\" :key=\"notification.id\" \r\n               class=\"p-4 rounded-lg\"\r\n               :class=\"{ 'bg-yellow-100': notification.notification_type === 'LOW_STOCK',\r\n                        'bg-red-100': notification.notification_type === 'EXPIRED' }\">\r\n            <h3 class=\"font-semibold text-gray-800\">\r\n              {{ notification.notification_type === 'LOW_STOCK' ? 'Low Stock Alert' : 'Item Expired' }}\r\n            </h3>\r\n            <p class=\"text-gray-600\">\r\n              {{ getNotificationDescription(notification) }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport axios from 'axios'\r\nimport DashboardCard from '../components/DashboardCard.vue'\r\n\r\nconst totalItems = ref(0)\r\nconst lowStockCount = ref(0)\r\nconst expiringCount = ref(0)\r\nconst recentTransactions = ref([])\r\nconst notifications = ref([])\r\nconst API_URL = 'http://localhost:5000/api/inventory'\r\n\r\nconst fetchDashboardData = async () => {\r\n  try {\r\n    const [itemsResponse, lowStockResponse, expiringResponse, transactionsResponse, notificationsResponse] = await Promise.all([\r\n      axios.get(`${API_URL}/items`),\r\n      axios.get(`${API_URL}/low-stock`),\r\n      axios.get(`${API_URL}/expiring-batches`),\r\n      axios.get(`${API_URL}/transactions`),\r\n      axios.get(`${API_URL}/notifications`)\r\n    ])\r\n\r\n    totalItems.value = itemsResponse.data.data.length\r\n    lowStockCount.value = lowStockResponse.data.data.length\r\n    expiringCount.value = expiringResponse.data.data.length\r\n    recentTransactions.value = transactionsResponse.data.data.slice(0, 5) // Get only the 5 most recent transactions\r\n    notifications.value = notificationsResponse.data.data.slice(0, 5) // Get only the 5 most recent notifications\r\n  } catch (error) {\r\n    console.error('Error fetching dashboard data:', error)\r\n  }\r\n}\r\n\r\nconst formatDate = (dateString) => {\r\n  return new Date(dateString).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nconst getNotificationDescription = (notification) => {\r\n  if (!notification.batch) return 'Details unavailable'\r\n\r\n  const itemName = notification.batch.inventoryItem?.name || 'Unknown Item'\r\n  const batchNumber = notification.batch.batch_number || 'Unknown Batch'\r\n\r\n  switch (notification.notification_type) {\r\n    case 'LOW_STOCK':\r\n      return `Batch ${batchNumber} of ${itemName} is running low. Current stock: ${notification.quantity_left || 'Unknown'}`\r\n    case 'EXPIRED':\r\n      return `Batch ${batchNumber} of ${itemName} has expired on ${formatDate(notification.expiry_date)}`\r\n    default:\r\n      return 'Please check your inventory'\r\n  }\r\n}\r\n\r\nonMounted(fetchDashboardData)\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}