{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"bg-white shadow-sm\"\n};\nvar _hoisted_2 = {\n  \"class\": \"flex items-center justify-between p-4\"\n};\nvar _hoisted_3 = {\n  key: 0,\n  \"class\": \"absolute -top-1 -right-1 block h-3 w-3 rounded-full bg-red-500\"\n};\nexport function render(_ctx, _cache) {\n  var _component_Menu = _resolveComponent(\"Menu\");\n  var _component_Bell = _resolveComponent(\"Bell\");\n  return _openBlock(), _createElementBlock(\"header\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.$emit('toggle-sidebar');\n    }),\n    \"class\": \"text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md\"\n  }, [_cache[2] || (_cache[2] = _createElementVNode(\"span\", {\n    \"class\": \"sr-only\"\n  }, \"Toggle Sidebar\", -1 /* HOISTED */)), _createVNode(_component_Menu, {\n    \"class\": \"h-6 w-6\"\n  })]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return _ctx.showNotification && _ctx.showNotification.apply(_ctx, arguments);\n    }),\n    \"class\": \"text-gray-500 hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md relative\"\n  }, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n    \"class\": \"sr-only\"\n  }, \"Notifications\", -1 /* HOISTED */)), _createVNode(_component_Bell, {\n    \"class\": \"h-6 w-6\"\n  }), _ctx.unreadNotifications ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3)) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","_cache","$event","_ctx","$emit","_createVNode","_component_Menu","showNotification","apply","arguments","_component_Bell","unreadNotifications","_hoisted_3","_createCommentVNode"],"sources":["C:\\Inventory-Clinic-MCC\\frontend\\src\\components\\Header.vue"],"sourcesContent":["<template>\r\n  <header class=\"bg-white shadow-sm\">\r\n    <div class=\"flex items-center justify-between p-4\">\r\n      <button @click=\"$emit('toggle-sidebar')\" class=\"text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md\">\r\n        <span class=\"sr-only\">Toggle Sidebar</span>\r\n        <Menu class=\"h-6 w-6\" />\r\n      </button>\r\n      \r\n      <button @click=\"showNotification\" class=\"text-gray-500 hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md relative\">\r\n        <span class=\"sr-only\">Notifications</span>\r\n        <Bell class=\"h-6 w-6\" />\r\n        <span v-if=\"unreadNotifications\" class=\"absolute -top-1 -right-1 block h-3 w-3 rounded-full bg-red-500\"></span>\r\n      </button>\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\nimport { useToast } from 'vue-toastification'\r\nimport { Menu, Bell } from 'lucide-vue-next'\r\nimport { useRouter } from 'vue-router'\r\n\r\nconst unreadNotifications = ref(false)\r\nconst toast = useToast()\r\nconst router = useRouter()\r\nlet fetchInterval = null\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/inventory/notifications')\r\n    const data = await response.json()\r\n    const hasUnreadNotifications = data.data.some(notification => !notification.seen)\r\n    if (hasUnreadNotifications && !unreadNotifications.value) {\r\n      toast.info('You have a new notification.');\r\n    }\r\n    unreadNotifications.value = hasUnreadNotifications\r\n  } catch (error) {\r\n    console.error('Error fetching notifications:', error)\r\n  }\r\n}\r\n\r\n  toast.info({\r\n    content: \"You have new notifications\",\r\n    onClick: () => {\r\n      router.push('/notifications')\r\n      toast.clear()\r\n    }\r\n  }, toastOptions)\r\n}\r\n\r\nconst showNotification = () => {\r\n  router.push('/notifications')\r\n}\r\n\r\nonMounted(() => {\r\n  fetchNotifications()\r\n  fetchInterval = setInterval(fetchNotifications, 15000)\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (fetchInterval) {\r\n    clearInterval(fetchInterval)\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;EACU,SAAM;AAAoB;;EAC3B,SAAM;AAAuC;;EAFtDA,GAAA;EAWyC,SAAM;;;;;uBAV7CC,mBAAA,CAaS,UAbTC,UAaS,GAZPC,mBAAA,CAWM,OAXNC,UAWM,GAVJD,mBAAA,CAGS;IAHAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEC,IAAA,CAAAC,KAAK;IAAA;IAAoB,SAAM;gCAC7CN,mBAAA,CAA2C;IAArC,SAAM;EAAS,GAAC,gBAAc,sBACpCO,YAAA,CAAwBC,eAAA;IAAlB,SAAM;EAAS,G,GAGvBR,mBAAA,CAIS;IAJAE,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEE,IAAA,CAAAI,gBAAA,IAAAJ,IAAA,CAAAI,gBAAA,CAAAC,KAAA,CAAAL,IAAA,EAAAM,SAAA,CAAgB;IAAA;IAAE,SAAM;gCACtCX,mBAAA,CAA0C;IAApC,SAAM;EAAS,GAAC,eAAa,sBACnCO,YAAA,CAAwBK,eAAA;IAAlB,SAAM;EAAS,IACTP,IAAA,CAAAQ,mBAAmB,I,cAA/Bf,mBAAA,CAA+G,QAA/GgB,UAA+G,KAXvHC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}