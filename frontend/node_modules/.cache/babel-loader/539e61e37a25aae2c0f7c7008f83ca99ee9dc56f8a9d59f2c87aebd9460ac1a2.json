{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"flex h-screen bg-gray-100\"\n};\nvar _hoisted_2 = {\n  \"class\": \"flexoverflow-x-hidden overflow-y-auto bg-gray-100\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Sidebar only if logged in \"), $setup.isLoggedIn ? (_openBlock(), _createBlock($setup[\"Sidebar\"], {\n    key: 0,\n    \"is-open\": $setup.sidebarOpen,\n    onToggleSidebar: $setup.toggleSidebar\n  }, null, 8 /* PROPS */, [\"is-open\"])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n    \"class\": _normalizeClass(['flex-1 flex flex-col overflow-hidden transition-all duration-300 ease-in-out', $setup.sidebarOpen ? 'ml-64' : 'ml-0' // Adjust margin based on sidebar state\n    ])\n  }, [_createCommentVNode(\" Header for logged-in users \"), $setup.isLoggedIn ? (_openBlock(), _createBlock($setup[\"Header\"], {\n    key: 0,\n    onToggleSidebar: $setup.toggleSidebar\n  })) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Main content area \"), _createElementVNode(\"main\", _hoisted_2, [_createVNode(_component_router_view)])], 2 /* CLASS */)]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createCommentVNode","$setup","isLoggedIn","_createBlock","key","sidebarOpen","onToggleSidebar","toggleSidebar","_createElementVNode","_normalizeClass","_hoisted_2","_createVNode","_component_router_view"],"sources":["C:\\Inventory-Clinic-MCC\\frontend\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"flex h-screen bg-gray-100\">\r\n    <!-- Sidebar only if logged in -->\r\n    <Sidebar \r\n      v-if=\"isLoggedIn\" \r\n      :is-open=\"sidebarOpen\" \r\n      @toggle-sidebar=\"toggleSidebar\" \r\n    />\r\n\r\n    <div \r\n      :class=\"[ \r\n        'flex-1 flex flex-col overflow-hidden transition-all duration-300 ease-in-out', \r\n        sidebarOpen ? 'ml-64' : 'ml-0' // Adjust margin based on sidebar state\r\n      ]\"\r\n    >\r\n      <!-- Header for logged-in users -->\r\n      <Header v-if=\"isLoggedIn\" @toggle-sidebar=\"toggleSidebar\" />\r\n\r\n      <!-- Main content area -->\r\n      <main \r\n        class=\"flexoverflow-x-hidden overflow-y-auto bg-gray-100\"\r\n      >\r\n        <router-view></router-view>\r\n      </main>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport Sidebar from './components/Sidebar.vue'\r\nimport Header from './components/Header.vue'\r\nimport { isLoggedIn } from './authState'\r\n\r\nconst router = useRouter()\r\nconst sidebarOpen = ref(true) // Sidebar open state\r\n\r\n// Function to toggle the sidebar\r\nconst toggleSidebar = () => {\r\n  sidebarOpen.value = !sidebarOpen.value\r\n}\r\n\r\n// Watch login status and redirect to login if user is not authenticated\r\nwatch(isLoggedIn, (newStatus) => {\r\n  if (!newStatus) {\r\n    router.push('/')\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n/* Ensure smooth scaling */\r\n.main {\r\n  transition: margin-left 0.3s ease-in-out;\r\n}\r\n\r\n\r\n</style>\r\n"],"mappings":";;EACO,SAAM;AAA2B;;EAmBhC,SAAM;AAAmD;;;uBAnB/DA,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,mBAAA,+BAAkC,EAE1BC,MAAA,CAAAC,UAAU,I,cADlBC,YAAA,CAIEF,MAAA;IAPNG,GAAA;IAKO,SAAO,EAAEH,MAAA,CAAAI,WAAW;IACpBC,eAAc,EAAEL,MAAA,CAAAM;0CANvBP,mBAAA,gBASIQ,mBAAA,CAeM;IAdH,SAVPC,eAAA,E,gFAUoHR,MAAA,CAAAI,WAAW;IAAA,C;MAKzHL,mBAAA,gCAAmC,EACrBC,MAAA,CAAAC,UAAU,I,cAAxBC,YAAA,CAA4DF,MAAA;IAhBlEG,GAAA;IAgBiCE,eAAc,EAAEL,MAAA,CAAAM;QAhBjDP,mBAAA,gBAkBMA,mBAAA,uBAA0B,EAC1BQ,mBAAA,CAIO,QAJPE,UAIO,GADLC,YAAA,CAA2BC,sBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}