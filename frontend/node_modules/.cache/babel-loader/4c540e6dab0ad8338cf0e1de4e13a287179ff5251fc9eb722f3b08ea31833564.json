{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"container mx-auto px-4 py-8\"\n};\nvar _hoisted_2 = {\n  \"class\": \"flex flex-wrap gap-2 mb-6 items-center\"\n};\nvar _hoisted_3 = {\n  \"class\": \"flex-grow flex flex-wrap gap-2\"\n};\nvar _hoisted_4 = [\"onClick\"];\nvar _hoisted_5 = {\n  key: 0,\n  \"class\": \"text-center py-8\"\n};\nvar _hoisted_6 = {\n  key: 1,\n  \"class\": \"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded\",\n  role: \"alert\"\n};\nvar _hoisted_7 = {\n  key: 2,\n  \"class\": \"text-center py-8\"\n};\nvar _hoisted_8 = {\n  key: 3,\n  \"class\": \"space-y-4\"\n};\nvar _hoisted_9 = {\n  \"class\": \"flex justify-between items-start\"\n};\nvar _hoisted_10 = {\n  \"class\": \"text-xl font-semibold text-gray-800 mb-2\"\n};\nvar _hoisted_11 = {\n  \"class\": \"text-gray-600 mb-2\"\n};\nvar _hoisted_12 = {\n  \"class\": \"text-sm text-gray-500\"\n};\nvar _hoisted_13 = {\n  \"class\": \"flex flex-col space-y-2\"\n};\nvar _hoisted_14 = [\"onClick\"];\nvar _hoisted_15 = [\"onClick\"];\nvar _hoisted_16 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", {\n    \"class\": \"text-gray-800 text-3xl font-bold mb-4\"\n  }, \"Notifications\", -1 /* HOISTED */)), _cache[4] || (_cache[4] = _createElementVNode(\"p\", {\n    \"class\": \"text-gray-600 mb-6\"\n  }, \"View and manage alerts for inventory items and batches.\", -1 /* HOISTED */)), _createCommentVNode(\" Filter buttons and Mark All as Read \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.notificationTypes, function (type) {\n    return _createElementVNode(\"button\", {\n      key: type,\n      onClick: function onClick($event) {\n        return $setup.setFilter(type);\n      },\n      \"class\": _normalizeClass([\"px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200\", $setup.filter === type ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'])\n    }, _toDisplayString(type), 11 /* TEXT, CLASS, PROPS */, _hoisted_4);\n  }), 64 /* STABLE_FRAGMENT */))]), $setup.filteredNotifications.length > 0 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: $setup.markAllAsRead,\n    \"class\": \"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition duration-300\"\n  }, \" Mark All as Read \")) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Notifications list \"), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    \"class\": \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", {\n    \"class\": \"mt-4 text-gray-600\"\n  }, \"Loading notifications...\", -1 /* HOISTED */)]))) : $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n    \"class\": \"font-bold\"\n  }, \"Error\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, _toDisplayString($setup.error), 1 /* TEXT */)])) : $setup.filteredNotifications.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _cache[2] || (_cache[2] = [_createElementVNode(\"svg\", {\n    \"class\": \"mx-auto h-12 w-12 text-gray-400\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"currentColor\"\n  }, [_createElementVNode(\"path\", {\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"2\",\n    d: \"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\"\n  })], -1 /* HOISTED */), _createElementVNode(\"p\", {\n    \"class\": \"mt-4 text-gray-600\"\n  }, \"No notifications at this time.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNotifications, function (notification) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: notification.id,\n      \"class\": _normalizeClass([\"bg-white shadow-lg rounded-lg p-6 transition-all duration-300 hover:shadow-xl\", $setup.getNotificationClass(notification.notification_type)])\n    }, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", null, [_createElementVNode(\"h2\", _hoisted_10, _toDisplayString(notification.title), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_11, _toDisplayString(notification.message), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_12, _toDisplayString($setup.formatDate(notification.created_at)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_13, [notification.notification_type === 'EXPIRED' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: function onClick($event) {\n        return $setup.disposeBatch(notification);\n      },\n      \"class\": \"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition duration-300\"\n    }, \" Dispose \", 8 /* PROPS */, _hoisted_14)) : _createCommentVNode(\"v-if\", true), notification.notification_type === 'REORDER' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      onClick: function onClick($event) {\n        return $setup.reorderItem(notification);\n      },\n      \"class\": \"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition duration-300\"\n    }, \" Reorder \", 8 /* PROPS */, _hoisted_15)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $setup.markAsSeen(notification.id);\n      },\n      \"class\": \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300\"\n    }, \" Mark as Seen \", 8 /* PROPS */, _hoisted_16)])])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]))]);\n}","map":{"version":3,"names":["key","role","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$setup","notificationTypes","type","onClick","$event","setFilter","_normalizeClass","filter","_hoisted_4","filteredNotifications","length","markAllAsRead","loading","_hoisted_5","_cache","error","_hoisted_6","_toDisplayString","_hoisted_7","fill","viewBox","stroke","d","_hoisted_8","notification","id","getNotificationClass","notification_type","_hoisted_9","_hoisted_10","title","_hoisted_11","message","_hoisted_12","formatDate","created_at","_hoisted_13","disposeBatch","_hoisted_14","reorderItem","_hoisted_15","markAsSeen","_hoisted_16"],"sources":["C:\\Inventory-Clinic-MCC\\frontend\\src\\views\\Notifications.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-4 py-8\">\r\n    <h1 class=\"text-gray-800 text-3xl font-bold mb-4\">Notifications</h1>\r\n    <p class=\"text-gray-600 mb-6\">View and manage alerts for inventory items and batches.</p>\r\n\r\n    <!-- Filter buttons and Mark All as Read -->\r\n    <div class=\"flex flex-wrap gap-2 mb-6 items-center\">\r\n      <div class=\"flex-grow flex flex-wrap gap-2\">\r\n        <button\r\n          v-for=\"type in notificationTypes\"\r\n          :key=\"type\"\r\n          @click=\"setFilter(type)\"\r\n          class=\"px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200\"\r\n          :class=\"filter === type ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\"\r\n        >\r\n          {{ type }}\r\n        </button>\r\n      </div>\r\n      <button\r\n        v-if=\"filteredNotifications.length > 0\"\r\n        @click=\"markAllAsRead\"\r\n        class=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition duration-300\"\r\n      >\r\n        Mark All as Read\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Notifications list -->\r\n    <div v-if=\"loading\" class=\"text-center py-8\">\r\n      <div class=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\r\n      <p class=\"mt-4 text-gray-600\">Loading notifications...</p>\r\n    </div>\r\n    <div v-else-if=\"error\" class=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded\" role=\"alert\">\r\n      <p class=\"font-bold\">Error</p>\r\n      <p>{{ error }}</p>\r\n    </div>\r\n    <div v-else-if=\"filteredNotifications.length === 0\" class=\"text-center py-8\">\r\n      <svg class=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\" />\r\n      </svg>\r\n      <p class=\"mt-4 text-gray-600\">No notifications at this time.</p>\r\n    </div>\r\n    <div v-else class=\"space-y-4\">\r\n      <div\r\n        v-for=\"notification in filteredNotifications\"\r\n        :key=\"notification.id\"\r\n        class=\"bg-white shadow-lg rounded-lg p-6 transition-all duration-300 hover:shadow-xl\"\r\n        :class=\"getNotificationClass(notification.notification_type)\"\r\n      >\r\n        <div class=\"flex justify-between items-start\">\r\n          <div>\r\n            <h2 class=\"text-xl font-semibold text-gray-800 mb-2\">\r\n              {{ notification.title }}\r\n            </h2>\r\n            <p class=\"text-gray-600 mb-2\">{{ notification.message }}</p>\r\n            <p class=\"text-sm text-gray-500\">{{ formatDate(notification.created_at) }}</p>\r\n          </div>\r\n          <div class=\"flex flex-col space-y-2\">\r\n            <button \r\n              v-if=\"notification.notification_type === 'EXPIRED'\"\r\n              @click=\"disposeBatch(notification)\"\r\n              class=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition duration-300\"\r\n            >\r\n              Dispose\r\n            </button>\r\n            <button \r\n              v-if=\"notification.notification_type === 'REORDER'\"\r\n              @click=\"reorderItem(notification)\"\r\n              class=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition duration-300\"\r\n            >\r\n              Reorder\r\n            </button>\r\n            <button \r\n              @click=\"markAsSeen(notification.id)\"\r\n              class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300\"\r\n            >\r\n              Mark as Seen\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\r\nimport axios from 'axios'\r\n\r\nconst notifications = ref([])\r\nconst loading = ref(true)\r\nconst error = ref(null)\r\nconst filter = ref('ALL')\r\nconst API_URL = 'http://localhost:5000/api/inventory'\r\n\r\nconst notificationTypes = ['ALL', 'LOW_STOCK', 'EXPIRED', 'SOON_EXPIRING', 'REORDER']\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    loading.value = true\r\n    const response = await axios.get(`${API_URL}/notifications`)\r\n    const newNotifications = response.data.data\r\n\r\n    // Avoid duplication by checking if the notification already exists\r\n    newNotifications.forEach(newNotification => {\r\n      if (!notifications.value.some(existingNotification => existingNotification.id === newNotification.id)) {\r\n        notifications.value.push(newNotification)\r\n      }\r\n    })\r\n\r\n    // Remove notifications that no longer exist in the response\r\n    notifications.value = notifications.value.filter(existingNotification => \r\n      newNotifications.some(newNotification => newNotification.id === existingNotification.id)\r\n    )\r\n\r\n  } catch (err) {\r\n    error.value = 'Failed to fetch notifications. Please try again later.'\r\n    console.error('Error fetching notifications:', err)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst filteredNotifications = computed(() => {\r\n  if (filter.value === 'ALL') return notifications.value\r\n  return notifications.value.filter(n => n.notification_type === filter.value)\r\n})\r\n\r\nconst setFilter = (type) => {\r\n  filter.value = type\r\n}\r\n\r\nconst disposeBatch = async (notification) => {\r\n  try {\r\n    await axios.post(`${API_URL}/batches//dispose`)\r\n    window.location.href = `/batch-management`\r\n    await markAsSeen(notification.id)\r\n  } catch (err) {\r\n    console.error('Error disposing batch:', err)\r\n  }\r\n}\r\n\r\nconst reorderItem = async (notification) => {\r\n  try {\r\n    console.log(`Reordering item with ID: ${notification.inventory_item_id}`)\r\n    window.location.href = `/batch-management`\r\n    await markAsSeen(notification.id)\r\n  } catch (err) {\r\n    console.error('Error reordering item:', err)\r\n  }\r\n}\r\n\r\nconst markAsSeen = async (id) => {\r\n  try {\r\n    await axios.patch(`${API_URL}/notifications/${id}`, { seen: true })\r\n    notifications.value = notifications.value.filter(n => n.id !== id)\r\n  } catch (err) {\r\n    console.error('Error marking notification as seen:', err)\r\n  }\r\n}\r\n\r\nconst markAllAsRead = async () => {\r\n  try {\r\n    const notificationsToMark = filteredNotifications.value.map(n => n.id)\r\n    await axios.post(`${API_URL}/notifications/mark-all-seen`, { \r\n      ids: notificationsToMark,\r\n      type: filter.value === 'ALL' ? undefined : filter.value\r\n    })\r\n    if (filter.value === 'ALL') {\r\n      notifications.value = []\r\n    } else {\r\n      notifications.value = notifications.value.filter(n => n.notification_type !== filter.value)\r\n    }\r\n  } catch (err) {\r\n    console.error('Error marking all notifications as seen:', err)\r\n    error.value = 'Failed to mark all notifications as read. Please try again.'\r\n  }\r\n}\r\n\r\nconst getNotificationClass = (type) => {\r\n  const classes = {\r\n    'LOW_STOCK': 'border-l-4 border-yellow-500',\r\n    'EXPIRED': 'border-l-4 border-red-500',\r\n    'SOON_EXPIRING': 'border-l-4 border-blue-500',\r\n    'REORDER': 'border-l-4 border-green-500'\r\n  }\r\n  return classes[type] || ''\r\n}\r\n\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return 'Unknown Date'\r\n  return new Date(dateString).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\n// Set up polling\r\nlet pollingInterval\r\n\r\nonMounted(() => {\r\n  fetchNotifications()\r\n  pollingInterval = setInterval(fetchNotifications, 5000) // Poll every 5 seconds\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (pollingInterval) clearInterval(pollingInterval)\r\n})\r\n\r\n// Watch for changes in notifications and update the view\r\nwatch(notifications, () => {\r\n  // This will trigger a re-render when notifications change\r\n}, { deep: true })\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}