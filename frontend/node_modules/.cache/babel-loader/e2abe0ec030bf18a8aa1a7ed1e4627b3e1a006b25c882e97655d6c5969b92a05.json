{"ast":null,"code":"import _regeneratorRuntime from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { Menu, Bell } from 'lucide-vue-next';\nimport { useRouter } from 'vue-router';\nexport default {\n  __name: 'Header',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var unreadNotifications = ref(false);\n    var showToastNotification = ref(false);\n    var router = useRouter();\n    var toastInterval = null;\n    var fetchInterval = null;\n    var fetchNotifications = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, data, hasUnreadNotifications;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('http://localhost:5000/api/inventory/notifications');\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n            case 6:\n              data = _context.sent;\n              hasUnreadNotifications = data.data.some(function (notification) {\n                return !notification.seen;\n              });\n              if (hasUnreadNotifications && !unreadNotifications.value) {\n                showToast();\n              }\n              unreadNotifications.value = hasUnreadNotifications;\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching notifications:', _context.t0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 12]]);\n      }));\n      return function fetchNotifications() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var showToast = function showToast() {\n      showToastNotification.value = true;\n      setTimeout(function () {\n        showToastNotification.value = false;\n      }, 5000);\n\n      // Clear existing interval if any\n      if (toastInterval) clearInterval(toastInterval);\n\n      // Set up new interval\n      toastInterval = setInterval(function () {\n        if (unreadNotifications.value) {\n          showToastNotification.value = true;\n          setTimeout(function () {\n            showToastNotification.value = false;\n          }, 5000);\n        } else {\n          clearInterval(toastInterval);\n        }\n      }, 60000); // Show again after 1 minute\n    };\n    var showNotification = function showNotification() {\n      router.push('/notifications');\n    };\n    onMounted(function () {\n      fetchNotifications();\n      // Set up polling to check for new notifications every 15 seconds\n      fetchInterval = setInterval(fetchNotifications, 15000);\n    });\n    onUnmounted(function () {\n      if (fetchInterval) clearInterval(fetchInterval);\n      if (toastInterval) clearInterval(toastInterval);\n    });\n    var __returned__ = {\n      unreadNotifications: unreadNotifications,\n      showToastNotification: showToastNotification,\n      router: router,\n      get toastInterval() {\n        return toastInterval;\n      },\n      set toastInterval(v) {\n        toastInterval = v;\n      },\n      get fetchInterval() {\n        return fetchInterval;\n      },\n      set fetchInterval(v) {\n        fetchInterval = v;\n      },\n      fetchNotifications: fetchNotifications,\n      showToast: showToast,\n      showNotification: showNotification,\n      ref: ref,\n      onMounted: onMounted,\n      onUnmounted: onUnmounted,\n      get Menu() {\n        return Menu;\n      },\n      get Bell() {\n        return Bell;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","Menu","Bell","useRouter","unreadNotifications","showToastNotification","router","toastInterval","fetchInterval","fetchNotifications","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","hasUnreadNotifications","wrap","_callee$","_context","prev","next","fetch","sent","json","some","notification","seen","value","showToast","t0","console","error","stop","apply","arguments","setTimeout","clearInterval","setInterval","showNotification","push"],"sources":["C:/Inventory-Clinic-MCC/frontend/src/components/Header.vue"],"sourcesContent":["<template>\r\n  <header class=\"bg-white shadow-sm\">\r\n    <div class=\"flex items-center justify-between p-4\">\r\n      <button @click=\"$emit('toggle-sidebar')\" class=\"text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md\">\r\n        <span class=\"sr-only\">Toggle Sidebar</span>\r\n        <Menu class=\"h-6 w-6\" />\r\n      </button>\r\n      \r\n      <div class=\"relative\">\r\n        <Transition name=\"fade\">\r\n          <div v-if=\"showToastNotification\" class=\"absolute right-8 top-1/2 -translate-y-1/2 bg-white border border-gray-200 rounded-lg shadow-lg p-3 max-w-xs animate-bounce\">\r\n            <p class=\"text-sm text-gray-800\">You have new notifications</p>\r\n          </div>\r\n        </Transition>\r\n        <button @click=\"showNotification\" class=\"text-gray-500 hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md relative\">\r\n          <span class=\"sr-only\">Notifications</span>\r\n          <Bell class=\"h-6 w-6\" />\r\n          <span v-if=\"unreadNotifications\" class=\"absolute -top-1 -right-1 block h-3 w-3 rounded-full bg-red-500\"></span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\nimport { Menu, Bell } from 'lucide-vue-next'\r\nimport { useRouter } from 'vue-router'\r\n\r\nconst unreadNotifications = ref(false)\r\nconst showToastNotification = ref(false)\r\nconst router = useRouter()\r\nlet toastInterval = null\r\nlet fetchInterval = null\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/inventory/notifications')\r\n    const data = await response.json()\r\n    const hasUnreadNotifications = data.data.some(notification => !notification.seen)\r\n    if (hasUnreadNotifications && !unreadNotifications.value) {\r\n      showToast()\r\n    }\r\n    unreadNotifications.value = hasUnreadNotifications\r\n  } catch (error) {\r\n    console.error('Error fetching notifications:', error)\r\n  }\r\n}\r\n\r\nconst showToast = () => {\r\n  showToastNotification.value = true\r\n  setTimeout(() => {\r\n    showToastNotification.value = false\r\n  }, 5000)\r\n\r\n  // Clear existing interval if any\r\n  if (toastInterval) clearInterval(toastInterval)\r\n\r\n  // Set up new interval\r\n  toastInterval = setInterval(() => {\r\n    if (unreadNotifications.value) {\r\n      showToastNotification.value = true\r\n      setTimeout(() => {\r\n        showToastNotification.value = false\r\n      }, 5000)\r\n    } else {\r\n      clearInterval(toastInterval)\r\n    }\r\n  }, 60000) // Show again after 1 minute\r\n}\r\n\r\nconst showNotification = () => {\r\n  router.push('/notifications')\r\n}\r\n\r\nonMounted(() => {\r\n  fetchNotifications()\r\n  // Set up polling to check for new notifications every 15 seconds\r\n  fetchInterval = setInterval(fetchNotifications, 15000)\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (fetchInterval) clearInterval(fetchInterval)\r\n  if (toastInterval) clearInterval(toastInterval)\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n\r\n@keyframes bounce {\r\n  0%, 100% {\r\n    transform: translateY(-50%) translateX(0);\r\n  }\r\n  50% {\r\n    transform: translateY(-60%) translateX(0);\r\n  }\r\n}\r\n\r\n.animate-bounce {\r\n  animation: bounce 1s infinite;\r\n}\r\n</style>"],"mappings":";;;;;;;;;AAyBA,SAASA,GAAG,EAAEC,SAAS,EAAEC,WAAW,QAAQ,KAAK;AACjD,SAASC,IAAI,EAAEC,IAAI,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,YAAY;;;;;;IAEtC,IAAMC,mBAAmB,GAAGN,GAAG,CAAC,KAAK,CAAC;IACtC,IAAMO,qBAAqB,GAAGP,GAAG,CAAC,KAAK,CAAC;IACxC,IAAMQ,MAAM,GAAGH,SAAS,CAAC,CAAC;IAC1B,IAAII,aAAa,GAAG,IAAI;IACxB,IAAIC,aAAa,GAAG,IAAI;IAExB,IAAMC,kBAAkB;MAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA;QAAA,IAAAC,QAAA,EAAAC,IAAA,EAAAC,sBAAA;QAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEAC,KAAK,CAAC,mDAAmD,CAAC;YAAA;cAA3ER,QAAQ,GAAAK,QAAA,CAAAI,IAAA;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OACKP,QAAQ,CAACU,IAAI,CAAC,CAAC;YAAA;cAA5BT,IAAI,GAAAI,QAAA,CAAAI,IAAA;cACJP,sBAAsB,GAAGD,IAAI,CAACA,IAAI,CAACU,IAAI,CAAC,UAAAC,YAAY;gBAAA,OAAI,CAACA,YAAY,CAACC,IAAI;cAAA,EAAC;cACjF,IAAIX,sBAAsB,IAAI,CAACb,mBAAmB,CAACyB,KAAK,EAAE;gBACxDC,SAAS,CAAC,CAAC;cACb;cACA1B,mBAAmB,CAACyB,KAAK,GAAGZ,sBAAsB;cAAAG,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAW,EAAA,GAAAX,QAAA;cAElDY,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAAb,QAAA,CAAAW,EAAO,CAAC;YAAA;YAAA;cAAA,OAAAX,QAAA,CAAAc,IAAA;UAAA;QAAA,GAAApB,OAAA;MAAA,CAExD;MAAA,gBAZKL,kBAAkBA,CAAA;QAAA,OAAAC,KAAA,CAAAyB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAYvB;IAED,IAAMN,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;MACtBzB,qBAAqB,CAACwB,KAAK,GAAG,IAAI;MAClCQ,UAAU,CAAC,YAAM;QACfhC,qBAAqB,CAACwB,KAAK,GAAG,KAAK;MACrC,CAAC,EAAE,IAAI,CAAC;;MAER;MACA,IAAItB,aAAa,EAAE+B,aAAa,CAAC/B,aAAa,CAAC;;MAE/C;MACAA,aAAa,GAAGgC,WAAW,CAAC,YAAM;QAChC,IAAInC,mBAAmB,CAACyB,KAAK,EAAE;UAC7BxB,qBAAqB,CAACwB,KAAK,GAAG,IAAI;UAClCQ,UAAU,CAAC,YAAM;YACfhC,qBAAqB,CAACwB,KAAK,GAAG,KAAK;UACrC,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,MAAM;UACLS,aAAa,CAAC/B,aAAa,CAAC;QAC9B;MACF,CAAC,EAAE,KAAK,CAAC,EAAC;IACZ,CAAC;IAED,IAAMiC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;MAC7BlC,MAAM,CAACmC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED1C,SAAS,CAAC,YAAM;MACdU,kBAAkB,CAAC,CAAC;MACpB;MACAD,aAAa,GAAG+B,WAAW,CAAC9B,kBAAkB,EAAE,KAAK,CAAC;IACxD,CAAC,CAAC;IAEFT,WAAW,CAAC,YAAM;MAChB,IAAIQ,aAAa,EAAE8B,aAAa,CAAC9B,aAAa,CAAC;MAC/C,IAAID,aAAa,EAAE+B,aAAa,CAAC/B,aAAa,CAAC;IACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}