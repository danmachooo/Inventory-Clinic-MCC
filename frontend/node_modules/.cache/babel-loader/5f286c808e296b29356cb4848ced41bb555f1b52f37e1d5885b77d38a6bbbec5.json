{"ast":null,"code":"import _regeneratorRuntime from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { useToast } from 'vue-toastification';\nimport { Menu, Bell } from 'lucide-vue-next';\nimport { useRouter } from 'vue-router';\nexport default {\n  __name: 'Header',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var unreadNotifications = ref(false);\n    var toast = useToast();\n    var router = useRouter();\n    var fetchInterval = null;\n    var fetchNotifications = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, data, hasUnreadNotifications;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('http://localhost:5000/api/inventory/notifications');\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n            case 6:\n              data = _context.sent;\n              hasUnreadNotifications = data.data.some(function (notification) {\n                return !notification.seen;\n              });\n              if (hasUnreadNotifications && !unreadNotifications.value) {\n                toast.info();\n              }\n              unreadNotifications.value = hasUnreadNotifications;\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching notifications:', _context.t0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 12]]);\n      }));\n      return function fetchNotifications() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var showToast = function showToast() {\n      var toastOptions = {\n        position: \"top-right\",\n        timeout: 5000,\n        closeOnClick: true,\n        pauseOnFocusLoss: true,\n        pauseOnHover: true,\n        draggable: true,\n        draggablePercent: 0.6,\n        showCloseButtonOnHover: false,\n        hideProgressBar: false,\n        closeButton: \"button\",\n        icon: true,\n        rtl: false\n      };\n      toast.info({\n        content: \"You have new notifications\",\n        onClick: function onClick() {\n          router.push('/notifications');\n          toast.clear();\n        }\n      }, toastOptions);\n    };\n    var showNotification = function showNotification() {\n      router.push('/notifications');\n    };\n    onMounted(function () {\n      fetchNotifications();\n      fetchInterval = setInterval(fetchNotifications, 15000);\n    });\n    onUnmounted(function () {\n      if (fetchInterval) {\n        clearInterval(fetchInterval);\n      }\n    });\n    var __returned__ = {\n      unreadNotifications: unreadNotifications,\n      toast: toast,\n      router: router,\n      get fetchInterval() {\n        return fetchInterval;\n      },\n      set fetchInterval(v) {\n        fetchInterval = v;\n      },\n      fetchNotifications: fetchNotifications,\n      showToast: showToast,\n      showNotification: showNotification,\n      ref: ref,\n      onMounted: onMounted,\n      onUnmounted: onUnmounted,\n      get useToast() {\n        return useToast;\n      },\n      get Menu() {\n        return Menu;\n      },\n      get Bell() {\n        return Bell;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","useToast","Menu","Bell","useRouter","unreadNotifications","toast","router","fetchInterval","fetchNotifications","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","hasUnreadNotifications","wrap","_callee$","_context","prev","next","fetch","sent","json","some","notification","seen","value","info","t0","console","error","stop","apply","arguments","showToast","toastOptions","position","timeout","closeOnClick","pauseOnFocusLoss","pauseOnHover","draggable","draggablePercent","showCloseButtonOnHover","hideProgressBar","closeButton","icon","rtl","content","onClick","push","clear","showNotification","setInterval","clearInterval"],"sources":["C:/Inventory-Clinic-MCC/frontend/src/components/Header.vue"],"sourcesContent":["<template>\r\n  <header class=\"bg-white shadow-sm\">\r\n    <div class=\"flex items-center justify-between p-4\">\r\n      <button @click=\"$emit('toggle-sidebar')\" class=\"text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md\">\r\n        <span class=\"sr-only\">Toggle Sidebar</span>\r\n        <Menu class=\"h-6 w-6\" />\r\n      </button>\r\n      \r\n      <button @click=\"showNotification\" class=\"text-gray-500 hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md relative\">\r\n        <span class=\"sr-only\">Notifications</span>\r\n        <Bell class=\"h-6 w-6\" />\r\n        <span v-if=\"unreadNotifications\" class=\"absolute -top-1 -right-1 block h-3 w-3 rounded-full bg-red-500\"></span>\r\n      </button>\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\nimport { useToast } from 'vue-toastification'\r\nimport { Menu, Bell } from 'lucide-vue-next'\r\nimport { useRouter } from 'vue-router'\r\n\r\nconst unreadNotifications = ref(false)\r\nconst toast = useToast()\r\nconst router = useRouter()\r\nlet fetchInterval = null\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/inventory/notifications')\r\n    const data = await response.json()\r\n    const hasUnreadNotifications = data.data.some(notification => !notification.seen)\r\n    if (hasUnreadNotifications && !unreadNotifications.value) {\r\n      toast.info()\r\n    }\r\n    unreadNotifications.value = hasUnreadNotifications\r\n  } catch (error) {\r\n    console.error('Error fetching notifications:', error)\r\n  }\r\n}\r\n\r\nconst showToast = () => {\r\n  const toastOptions = {\r\n    position: \"top-right\",\r\n    timeout: 5000,\r\n    closeOnClick: true,\r\n    pauseOnFocusLoss: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    draggablePercent: 0.6,\r\n    showCloseButtonOnHover: false,\r\n    hideProgressBar: false,\r\n    closeButton: \"button\",\r\n    icon: true,\r\n    rtl: false\r\n  }\r\n\r\n  toast.info({\r\n    content: \"You have new notifications\",\r\n    onClick: () => {\r\n      router.push('/notifications')\r\n      toast.clear()\r\n    }\r\n  }, toastOptions)\r\n}\r\n\r\nconst showNotification = () => {\r\n  router.push('/notifications')\r\n}\r\n\r\nonMounted(() => {\r\n  fetchNotifications()\r\n  fetchInterval = setInterval(fetchNotifications, 15000)\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (fetchInterval) {\r\n    clearInterval(fetchInterval)\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}