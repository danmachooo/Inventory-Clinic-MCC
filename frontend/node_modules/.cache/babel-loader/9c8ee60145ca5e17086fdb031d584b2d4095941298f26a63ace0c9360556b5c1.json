{"ast":null,"code":"import _regeneratorRuntime from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Inventory-Clinic-MCC/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nvar API_URL = 'http://localhost:5000/api/inventory'; // Replace with your actual API URL\n\nexport default {\n  __name: 'Notifications',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var notifications = ref([]);\n    var loading = ref(true);\n    var error = ref(null);\n    var fetchNotifications = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              loading.value = true;\n              _context.next = 4;\n              return axios.get(\"\".concat(API_URL, \"/notifications\"));\n            case 4:\n              response = _context.sent;\n              notifications.value = response.data.data;\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              error.value = 'Failed to fetch notifications. Please try again later.';\n              console.error('Error fetching notifications:', _context.t0);\n            case 12:\n              _context.prev = 12;\n              loading.value = false;\n              return _context.finish(12);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8, 12, 15]]);\n      }));\n      return function fetchNotifications() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var markAsSeen = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {\n        var index;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.patch(\" \".concat(API_URL, \"/notifications/\").concat(id), {\n                seen: true\n              });\n            case 3:\n              index = notifications.value.findIndex(function (n) {\n                return n.id === id;\n              });\n              if (index !== -1) {\n                notifications.value[index].seen = true;\n              }\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error marking notification as seen:', _context2.t0);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n      return function markAsSeen(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var getNotificationTitle = function getNotificationTitle(notification) {\n      switch (notification.notification_type) {\n        case 'LOW_STOCK':\n          return 'Low Stock Alert';\n        case 'EXPIRED':\n          return 'Batch Expired';\n        default:\n          return 'Notification';\n      }\n    };\n    var getNotificationDescription = function getNotificationDescription(notification) {\n      var _notification$batch$i;\n      if (!notification.batch) {\n        return 'Details unavailable';\n      }\n      var itemName = ((_notification$batch$i = notification.batch.inventoryItem) === null || _notification$batch$i === void 0 ? void 0 : _notification$batch$i.name) || 'Unknown Item';\n      var batchNumber = notification.batch.batch_number || 'Unknown Batch';\n      switch (notification.notification_type) {\n        case 'LOW_STOCK':\n          return \"Batch \".concat(batchNumber, \" of \").concat(itemName, \" is running low. Current stock: \").concat(notification.quantity_left || 'Unknown');\n        case 'EXPIRED':\n          return \"Batch \".concat(batchNumber, \" of \").concat(itemName, \" has expired on \").concat(formatDate(notification.expiry_date));\n        default:\n          return 'Please check your inventory';\n      }\n    };\n    var formatDate = function formatDate(dateString) {\n      if (!dateString) return 'Unknown Date';\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    };\n    onMounted(fetchNotifications);\n    var __returned__ = {\n      notifications: notifications,\n      loading: loading,\n      error: error,\n      API_URL: API_URL,\n      fetchNotifications: fetchNotifications,\n      markAsSeen: markAsSeen,\n      getNotificationTitle: getNotificationTitle,\n      getNotificationDescription: getNotificationDescription,\n      formatDate: formatDate,\n      ref: ref,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","API_URL","notifications","loading","error","fetchNotifications","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","value","get","concat","sent","data","t0","console","finish","stop","apply","arguments","markAsSeen","_ref3","_callee2","id","index","_callee2$","_context2","patch","seen","findIndex","n","_x","getNotificationTitle","notification","notification_type","getNotificationDescription","_notification$batch$i","batch","itemName","inventoryItem","name","batchNumber","batch_number","quantity_left","formatDate","expiry_date","dateString","Date","toLocaleDateString","year","month","day"],"sources":["C:/Inventory-Clinic-MCC/frontend/src/views/Notifications.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-6 py-8\">\r\n    <h1 class=\"text-gray-700 text-3xl font-medium\">Notifications</h1>\r\n    <p class=\"mt-4 text-gray-600\">View and manage alerts for low stock batches and expired batches.</p>\r\n\r\n    <div class=\"mt-8\">\r\n      <div v-if=\"loading\" class=\"text-center\">\r\n        <p class=\"text-gray-600\">Loading notifications...</p>\r\n      </div>\r\n      <div v-else-if=\"error\" class=\"text-center\">\r\n        <p class=\"text-red-600\">{{ error }}</p>\r\n      </div>\r\n      <div v-else-if=\"notifications.length === 0\" class=\"text-center\">\r\n        <p class=\"text-gray-600\">No notifications at this time.</p>\r\n      </div>\r\n      <div v-else class=\"space-y-4\">\r\n        <div v-for=\"notification in notifications\" :key=\"notification.id\"\r\n             class=\"bg-white shadow-md rounded-lg p-4 flex items-center justify-between\"\r\n             :class=\"{ 'border-l-4 border-yellow-500': notification.notification_type === 'LOW_STOCK',\r\n                      'border-l-4 border-red-500': notification.notification_type === 'EXPIRED' }\">\r\n          <div>\r\n            <h2 class=\"text-lg font-semibold text-gray-800\">\r\n              {{ getNotificationTitle(notification) }}\r\n            </h2>\r\n            <p class=\"text-gray-600\">{{ getNotificationDescription(notification) }}</p>\r\n            <p class=\"text-sm text-gray-500 mt-1\">{{ formatDate(notification.created_at) }}</p>\r\n          </div>\r\n          <button \r\n            v-if=\"notification.notification_type === 'EXPIRED' && !notification.seen\"\r\n            @click=\"disposeBatch(notification.id, notification.batch.id)\"\r\n            class=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition duration-300\">\r\n            Dispose\r\n          </button>\r\n          <button \r\n            v-if=\"notification.notification_type !== 'EXPIRED' && !notification.seen\"\r\n            @click=\"markAsSeen(notification.id)\"\r\n            class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300\">\r\n            Mark as Seen\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport axios from 'axios'\r\n\r\nconst notifications = ref([])\r\nconst loading = ref(true)\r\nconst error = ref(null)\r\nconst API_URL = 'http://localhost:5000/api/inventory' // Replace with your actual API URL\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    loading.value = true\r\n    const response = await axios.get(`${API_URL}/notifications`)\r\n    notifications.value = response.data.data\r\n  } catch (err) {\r\n    error.value = 'Failed to fetch notifications. Please try again later.'\r\n    console.error('Error fetching notifications:', err)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst markAsSeen = async (id) => {\r\n  try {\r\n    await axios.patch(` ${API_URL}/notifications/${id}`, { seen: true })\r\n    const index = notifications.value.findIndex(n => n.id === id)\r\n    if (index !== -1) {\r\n      notifications.value[index].seen = true\r\n    }\r\n  } catch (err) {\r\n    console.error('Error marking notification as seen:', err)\r\n  }\r\n}\r\n\r\nconst getNotificationTitle = (notification) => {\r\n  switch (notification.notification_type) {\r\n    case 'LOW_STOCK':\r\n      return 'Low Stock Alert'\r\n    case 'EXPIRED':\r\n      return 'Batch Expired'\r\n    default:\r\n      return 'Notification'\r\n  }\r\n}\r\n\r\nconst getNotificationDescription = (notification) => {\r\n  if (!notification.batch) {\r\n    return 'Details unavailable'\r\n  }\r\n\r\n  const itemName = notification.batch.inventoryItem?.name || 'Unknown Item'\r\n  const batchNumber = notification.batch.batch_number || 'Unknown Batch'\r\n\r\n  switch (notification.notification_type) {\r\n    case 'LOW_STOCK':\r\n      return `Batch ${batchNumber} of ${itemName} is running low. Current stock: ${notification.quantity_left || 'Unknown'}`\r\n    case 'EXPIRED':\r\n      return `Batch ${batchNumber} of ${itemName} has expired on ${formatDate(notification.expiry_date)}`\r\n    default:\r\n      return 'Please check your inventory'\r\n  }\r\n}\r\n\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return 'Unknown Date'\r\n  return new Date(dateString).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nonMounted(fetchNotifications)\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}