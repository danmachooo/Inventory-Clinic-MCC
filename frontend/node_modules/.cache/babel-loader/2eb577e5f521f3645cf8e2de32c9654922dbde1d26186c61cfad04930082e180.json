{"ast":null,"code":"import { createElementVNode as _createElementVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"bg-white shadow-sm\"\n};\nvar _hoisted_2 = {\n  \"class\": \"flex items-center justify-between p-4\"\n};\nvar _hoisted_3 = {\n  key: 0,\n  \"class\": \"absolute -top-1 -right-1 block h-3 w-3 rounded-full bg-red-500\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"header\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.$emit('toggle-sidebar');\n    }),\n    \"class\": \"text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md\"\n  }, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n    \"class\": \"sr-only\"\n  }, \"Toggle Sidebar\", -1 /* HOISTED */)), _createVNode($setup[\"Menu\"], {\n    \"class\": \"h-6 w-6\"\n  })]), _createElementVNode(\"button\", {\n    onClick: $setup.showNotification,\n    \"class\": \"text-gray-500 hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md relative\"\n  }, [_cache[2] || (_cache[2] = _createElementVNode(\"span\", {\n    \"class\": \"sr-only\"\n  }, \"Notifications\", -1 /* HOISTED */)), _createVNode($setup[\"Bell\"], {\n    \"class\": \"h-6 w-6\"\n  }), $setup.unreadNotifications ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3)) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","_cache","$event","_ctx","$emit","_createVNode","$setup","showNotification","unreadNotifications","_hoisted_3","_createCommentVNode"],"sources":["C:\\Inventory-Clinic-MCC\\frontend\\src\\components\\Header.vue"],"sourcesContent":["<template>\r\n  <header class=\"bg-white shadow-sm\">\r\n    <div class=\"flex items-center justify-between p-4\">\r\n      <button @click=\"$emit('toggle-sidebar')\" class=\"text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md\">\r\n        <span class=\"sr-only\">Toggle Sidebar</span>\r\n        <Menu class=\"h-6 w-6\" />\r\n      </button>\r\n      \r\n      <button @click=\"showNotification\" class=\"text-gray-500 hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 rounded-md relative\">\r\n        <span class=\"sr-only\">Notifications</span>\r\n        <Bell class=\"h-6 w-6\" />\r\n        <span v-if=\"unreadNotifications\" class=\"absolute -top-1 -right-1 block h-3 w-3 rounded-full bg-red-500\"></span>\r\n      </button>\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch } from 'vue'\r\nimport { useToast } from 'vue-toast-notification'\r\nimport { Menu, Bell } from 'lucide-vue-next'\r\nimport { useRouter } from 'vue-router'\r\n\r\nconst unreadNotifications = ref(false)\r\nconst $toast = useToast()\r\nconst router = useRouter()\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    const response = await fetch('/api/inventory/notifications')\r\n    const data = await response.json()\r\n    unreadNotifications.value = data.data.some(notification => !notification.seen)\r\n    if (unreadNotifications.value) {\r\n      showToast()\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching notifications:', error)\r\n  }\r\n}\r\n\r\nconst showToast = () => {\r\n  $toast.info({\r\n    message: 'A new notification',\r\n    duration: 0,\r\n    position: 'top-right',\r\n    action: {\r\n      text: 'View',\r\n      onClick: (e, toastObject) => {\r\n        router.push('/notifications')\r\n        toastObject.goAway(0)\r\n      },\r\n    },\r\n  })\r\n}\r\n\r\nconst showNotification = () => {\r\n  router.push('/notifications')\r\n}\r\n\r\nonMounted(() => {\r\n  fetchNotifications()\r\n  // Set up polling to check for new notifications every minute\r\n  setInterval(fetchNotifications, 60000)\r\n})\r\n\r\nwatch(unreadNotifications, (newValue) => {\r\n  if (newValue) {\r\n    showToast()\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n@import 'vue-toast-notification/dist/theme-sugar.css';\r\n</style>"],"mappings":";;EACU,SAAM;AAAoB;;EAC3B,SAAM;AAAuC;;EAFtDA,GAAA;EAWyC,SAAM;;;uBAV7CC,mBAAA,CAaS,UAbTC,UAaS,GAZPC,mBAAA,CAWM,OAXNC,UAWM,GAVJD,mBAAA,CAGS;IAHAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEC,IAAA,CAAAC,KAAK;IAAA;IAAoB,SAAM;gCAC7CN,mBAAA,CAA2C;IAArC,SAAM;EAAS,GAAC,gBAAc,sBACpCO,YAAA,CAAwBC,MAAA;IAAlB,SAAM;EAAS,G,GAGvBR,mBAAA,CAIS;IAJAE,OAAK,EAAEM,MAAA,CAAAC,gBAAgB;IAAE,SAAM;gCACtCT,mBAAA,CAA0C;IAApC,SAAM;EAAS,GAAC,eAAa,sBACnCO,YAAA,CAAwBC,MAAA;IAAlB,SAAM;EAAS,IACTA,MAAA,CAAAE,mBAAmB,I,cAA/BZ,mBAAA,CAA+G,QAA/Ga,UAA+G,KAXvHC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}