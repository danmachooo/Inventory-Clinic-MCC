'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var With = function (_React$Component) {
  _inherits(With, _React$Component);

  function With(props) {
    _classCallCheck(this, With);

    var _this = _possibleConstructorReturn(this, (With.__proto__ || Object.getPrototypeOf(With)).call(this, props));

    var lazy = props.lazy,
        enter = props.enter,
        input = props.input;

    _this.state = { output: !lazy && enter ? enter(input) : undefined };
    return _this;
  }

  _createClass(With, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          lazy = _props.lazy,
          enter = _props.enter,
          input = _props.input;

      if (lazy && enter) {
        this.setState({ output: enter(input) });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _props2 = this.props,
          input = _props2.input,
          exit = _props2.exit;
      var output = this.state.output;

      exit && exit(output, input);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var next = nextProps.input,
          enter = nextProps.enter;
      var _props3 = this.props,
          previous = _props3.input,
          shouldUpdate = _props3.shouldUpdate,
          exit = _props3.exit;
      var output = this.state.output;


      if (!shouldUpdate(previous, next)) {
        return;
      }

      exit && exit(output, previous);
      enter && this.setState({ output: enter(next) });
    }
  }, {
    key: 'render',
    value: function render() {
      var render = this.props.render;
      var output = this.state.output;

      return render ? render(output) : null;
    }
  }]);

  return With;
}(_react2.default.Component);

With.propTypes = {
  input: _propTypes2.default.any,
  enter: _propTypes2.default.func,
  exit: _propTypes2.default.func,
  lazy: _propTypes2.default.bool,
  render: _propTypes2.default.func,
  shouldUpdate: _propTypes2.default.func.isRequired
};

With.defaultProps = {
  lazy: false,
  shouldUpdate: function shouldUpdate(a, b) {
    return !(0, _equals2.default)(a, b);
  }
};

exports.default = With;